{"uid":"4ea20a9df4d4a294","name":"test_CredKart_Login_params_003[data_for_login2]","fullName":"TestCases.test_Login_params.Test_CredKart_Login_params#test_CredKart_Login_params_003","historyId":"049434f3e12c0a35238e01e3ed2599b3","time":{"start":1691823393603,"stop":1691823401525,"duration":7922},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <TestCases.test_Login_params.Test_CredKart_Login_params object at 0x0000027733954250>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a978096b682b4edcfa918f0b59eaca98\")>\ndata_for_login = ('Credenrcetest@test.com', 'Credence@123')\n\n    def test_CredKart_Login_params_003(self, setup, data_for_login):\n        self.driver = setup\n        self.driver.get(\"https://automation.credence.in/login\")\n        self.driver.find_element(By.XPATH, \"//input[@name='email']\").send_keys(data_for_login[0])\n        self.driver.find_element(By.CSS_SELECTOR, \"input[id='password']\").send_keys(data_for_login[1])\n        self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n        try:\n>           self.driver.find_element(By.XPATH, \"//h2[normalize-space()='CredKart']\")\n\nTestCases\\test_Login_params.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027732BB19D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF7B0874C33]\\\\n\\\\tBaseThreadInitThunk [0x00007FFBFE827614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFBFF3626B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//h2[normalize-space()='CredKart']\"}\nE         (Session info: headless chrome=115.0.5790.171); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF7B0904A62+57106]\nE       \t(No symbol) [0x00007FF7B087CF52]\nE       \t(No symbol) [0x00007FF7B074E2CB]\nE       \t(No symbol) [0x00007FF7B078786E]\nE       \t(No symbol) [0x00007FF7B078795C]\nE       \t(No symbol) [0x00007FF7B07C0477]\nE       \t(No symbol) [0x00007FF7B07A69FF]\nE       \t(No symbol) [0x00007FF7B07BE522]\nE       \t(No symbol) [0x00007FF7B07A6793]\nE       \t(No symbol) [0x00007FF7B077CE81]\nE       \t(No symbol) [0x00007FF7B077E064]\nE       \tGetHandleVerifier [0x00007FF7B0BB4222+2873042]\nE       \tGetHandleVerifier [0x00007FF7B0C06590+3209792]\nE       \tGetHandleVerifier [0x00007FF7B0BFF3AF+3180639]\nE       \tGetHandleVerifier [0x00007FF7B0995F25+652245]\nE       \t(No symbol) [0x00007FF7B0888618]\nE       \t(No symbol) [0x00007FF7B08847C4]\nE       \t(No symbol) [0x00007FF7B08848BC]\nE       \t(No symbol) [0x00007FF7B0874C33]\nE       \tBaseThreadInitThunk [0x00007FFBFE827614+20]\nE       \tRtlUserThreadStart [0x00007FFBFF3626B1+33]\n\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.test_Login_params.Test_CredKart_Login_params object at 0x0000027733954250>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a978096b682b4edcfa918f0b59eaca98\")>\ndata_for_login = ('Credenrcetest@test.com', 'Credence@123')\n\n    def test_CredKart_Login_params_003(self, setup, data_for_login):\n        self.driver = setup\n        self.driver.get(\"https://automation.credence.in/login\")\n        self.driver.find_element(By.XPATH, \"//input[@name='email']\").send_keys(data_for_login[0])\n        self.driver.find_element(By.CSS_SELECTOR, \"input[id='password']\").send_keys(data_for_login[1])\n        self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n        try:\n            self.driver.find_element(By.XPATH, \"//h2[normalize-space()='CredKart']\")\n            self.driver.save_screenshot(\".\\\\Screenshots\\\\\" + data_for_login[0] + \"_\" + data_for_login[1] + \"_\" + \"test_CredKart_Login_002_Pass.PNG\")\n            print('Login TestCase is Passed')\n            self.driver.close()\n            assert True\n        except:\n            print('Login TestCase is Failed')\n            self.driver.save_screenshot(\".\\\\Screenshots\\\\\" + data_for_login[0] + \"_\" + data_for_login[1] + \"_\" + \"test_CredKart_Login_002_fail.PNG\")\n            self.driver.close()\n>           assert False\nE           assert False\n\nTestCases\\test_Login_params.py:22: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1691823383985,"stop":1691823383986,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"setup","time":{"start":1691823383986,"stop":1691823393601,"duration":9615},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"data_for_login","time":{"start":1691823393601,"stop":1691823393602,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"parentSuite","value":"TestCases"},{"name":"suite","value":"test_Login_params"},{"name":"subSuite","value":"Test_CredKart_Login_params"},{"name":"host","value":"LAPTOP-1DT8TVKR"},{"name":"thread","value":"17584-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCases.test_Login_params"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data_for_login","value":"('Credenrcetest@test.com', 'Credence@123')"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"4ea20a9df4d4a294.json","parameterValues":["('Credenrcetest@test.com', 'Credence@123')"]}