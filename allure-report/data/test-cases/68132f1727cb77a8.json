{"uid":"68132f1727cb77a8","name":"test_CredKart_Login_params_003[data_for_login3]","fullName":"TestCases.test_Login_params.Test_CredKart_Login_params#test_CredKart_Login_params_003","historyId":"d6514f178bec2c6188645a746759aeba","time":{"start":1691831862625,"stop":1691831870269,"duration":7644},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <TestCases.test_Login_params.Test_CredKart_Login_params object at 0x0000027F00E2D150>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4e8bf29512565c9a55dd64c0b60922d4\")>\ndata_for_login = ('Credencetst@test.com', 'Credence@126')\n\n    def test_CredKart_Login_params_003(self, setup, data_for_login):\n        self.driver = setup\n        self.driver.get(\"https://automation.credence.in/login\")\n        self.driver.find_element(By.XPATH, \"//input[@name='email']\").send_keys(data_for_login[0])\n        self.driver.find_element(By.CSS_SELECTOR, \"input[id='password']\").send_keys(data_for_login[1])\n        self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n        try:\n>           self.driver.find_element(By.XPATH, \"//h2[normalize-space()='CredKart']\")\n\nTestCases\\test_Login_params.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027F000019D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF6E56F4C33]\\\\n\\\\tBaseThreadInitThunk [0x00007FFBFE827614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFBFF3626B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//h2[normalize-space()='CredKart']\"}\nE         (Session info: headless chrome=115.0.5790.171); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF6E5784A62+57106]\nE       \t(No symbol) [0x00007FF6E56FCF52]\nE       \t(No symbol) [0x00007FF6E55CE2CB]\nE       \t(No symbol) [0x00007FF6E560786E]\nE       \t(No symbol) [0x00007FF6E560795C]\nE       \t(No symbol) [0x00007FF6E5640477]\nE       \t(No symbol) [0x00007FF6E56269FF]\nE       \t(No symbol) [0x00007FF6E563E522]\nE       \t(No symbol) [0x00007FF6E5626793]\nE       \t(No symbol) [0x00007FF6E55FCE81]\nE       \t(No symbol) [0x00007FF6E55FE064]\nE       \tGetHandleVerifier [0x00007FF6E5A34222+2873042]\nE       \tGetHandleVerifier [0x00007FF6E5A86590+3209792]\nE       \tGetHandleVerifier [0x00007FF6E5A7F3AF+3180639]\nE       \tGetHandleVerifier [0x00007FF6E5815F25+652245]\nE       \t(No symbol) [0x00007FF6E5708618]\nE       \t(No symbol) [0x00007FF6E57047C4]\nE       \t(No symbol) [0x00007FF6E57048BC]\nE       \t(No symbol) [0x00007FF6E56F4C33]\nE       \tBaseThreadInitThunk [0x00007FFBFE827614+20]\nE       \tRtlUserThreadStart [0x00007FFBFF3626B1+33]\n\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.test_Login_params.Test_CredKart_Login_params object at 0x0000027F00E2D150>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4e8bf29512565c9a55dd64c0b60922d4\")>\ndata_for_login = ('Credencetst@test.com', 'Credence@126')\n\n    def test_CredKart_Login_params_003(self, setup, data_for_login):\n        self.driver = setup\n        self.driver.get(\"https://automation.credence.in/login\")\n        self.driver.find_element(By.XPATH, \"//input[@name='email']\").send_keys(data_for_login[0])\n        self.driver.find_element(By.CSS_SELECTOR, \"input[id='password']\").send_keys(data_for_login[1])\n        self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n        try:\n            self.driver.find_element(By.XPATH, \"//h2[normalize-space()='CredKart']\")\n            self.driver.save_screenshot(\".\\\\Screenshots\\\\\" + data_for_login[0] + \"_\" + data_for_login[1] + \"_\" + \"test_CredKart_Login_002_Pass.PNG\")\n            print('Login TestCase is Passed')\n            self.driver.close()\n            assert True\n        except:\n            print('Login TestCase is Failed')\n            self.driver.save_screenshot(\".\\\\Screenshots\\\\\" + data_for_login[0] + \"_\" + data_for_login[1] + \"_\" + \"test_CredKart_Login_002_fail.PNG\")\n            self.driver.close()\n>           assert False\nE           assert False\n\nTestCases\\test_Login_params.py:22: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":16,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1691831851842,"stop":1691831862618,"duration":10776},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"browser","time":{"start":1691831851842,"stop":1691831851842,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"data_for_login","time":{"start":1691831862619,"stop":1691831862619,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"parentSuite","value":"TestCases"},{"name":"suite","value":"test_Login_params"},{"name":"subSuite","value":"Test_CredKart_Login_params"},{"name":"host","value":"LAPTOP-1DT8TVKR"},{"name":"thread","value":"10760-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCases.test_Login_params"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data_for_login","value":"('Credencetst@test.com', 'Credence@126')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"bea1419e3c269ac","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691831589950,"stop":1691831597671,"duration":7721}},{"uid":"20a2b800cd3f276","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691831377866,"stop":1691831385279,"duration":7413}},{"uid":"2d3843c28c0875aa","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691830194467,"stop":1691830216820,"duration":22353}},{"uid":"4eda5ebeedd4e05e","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691829885212,"stop":1691829941115,"duration":55903}},{"uid":"61c9416cd71ae076","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691829798104,"stop":1691829809397,"duration":11293}},{"uid":"cf809deca9d983ae","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691829568784,"stop":1691829578671,"duration":9887}},{"uid":"56e978ad7a3f3904","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691828942404,"stop":1691828957906,"duration":15502}},{"uid":"34017ff6486978d0","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691828747728,"stop":1691828760571,"duration":12843}},{"uid":"7943ec4eacb1b0ad","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691828008590,"stop":1691828016005,"duration":7415}},{"uid":"fdf56d738c363a85","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691827782446,"stop":1691827793047,"duration":10601}},{"uid":"703d7b1b4e9c6fb1","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691827568367,"stop":1691827570579,"duration":2212}},{"uid":"47a83da3ec6b60d7","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691823393603,"stop":1691823401270,"duration":7667}},{"uid":"15bc79d64ea242f4","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691821002981,"stop":1691821036548,"duration":33567}},{"uid":"b0960f13a870c401","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691820849828,"stop":1691820863617,"duration":13789}},{"uid":"db529b2934f13277","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691816741433,"stop":1691816758853,"duration":17420}},{"uid":"3e45b026995bade9","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691816393522,"stop":1691816419951,"duration":26429}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"7aac8d359a8bb0f7","reportUrl":"http://localhost:8080/job/pytest_framework_2/2/allure/#testresult/7aac8d359a8bb0f7","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691823393603,"stop":1691823401270,"duration":7667}},{"uid":"229f965606c6b027","reportUrl":"http://localhost:8080/job/pytest_framework_2/1/allure/#testresult/229f965606c6b027","status":"failed","statusDetails":"AssertionError: assert False","time":{"start":1691823393603,"stop":1691823401270,"duration":7667}}]},"tags":[]},"source":"68132f1727cb77a8.json","parameterValues":["('Credencetst@test.com', 'Credence@126')"]}