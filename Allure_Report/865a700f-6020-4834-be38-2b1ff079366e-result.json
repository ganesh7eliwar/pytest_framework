{"name": "test_CredKart_Login_params_003[data_for_login1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <TestCases.test_Login_params.Test_CredKart_Login_params object at 0x000001C2DA0246D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9c91c4fa457d90e18da56be348e2749f\")>\ndata_for_login = ('Credencetest@test.com', 'Credence@124')\n\n    def test_CredKart_Login_params_003(self, setup, data_for_login):\n        self.driver = setup\n        self.driver.get(\"https://automation.credence.in/login\")\n        self.driver.find_element(By.XPATH, \"//input[@name='email']\").send_keys(data_for_login[0])\n        self.driver.find_element(By.CSS_SELECTOR, \"input[id='password']\").send_keys(data_for_login[1])\n        self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n        try:\n>           self.driver.find_element(By.XPATH, \"//h2[normalize-space()='CredKart']\")\n\nTestCases\\test_Login_params.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C2D87A4450>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C47B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C47AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//h2[normalize-space()='CredKart']\"}\nE         (Session info: headless chrome=115.0.5790.171); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x009EA813+48355]\nE       \t(No symbol) [0x0097C4B1]\nE       \t(No symbol) [0x00885358]\nE       \t(No symbol) [0x008B09A5]\nE       \t(No symbol) [0x008B0B3B]\nE       \t(No symbol) [0x008DE232]\nE       \t(No symbol) [0x008CA784]\nE       \t(No symbol) [0x008DC922]\nE       \t(No symbol) [0x008CA536]\nE       \t(No symbol) [0x008A82DC]\nE       \t(No symbol) [0x008A93DD]\nE       \tGetHandleVerifier [0x00C4AABD+2539405]\nE       \tGetHandleVerifier [0x00C8A78F+2800735]\nE       \tGetHandleVerifier [0x00C8456C+2775612]\nE       \tGetHandleVerifier [0x00A751E0+616112]\nE       \t(No symbol) [0x00985F8C]\nE       \t(No symbol) [0x00982328]\nE       \t(No symbol) [0x0098240B]\nE       \t(No symbol) [0x00974FF7]\nE       \tBaseThreadInitThunk [0x771700C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C47B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C47AEE+238]\n\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.test_Login_params.Test_CredKart_Login_params object at 0x000001C2DA0246D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9c91c4fa457d90e18da56be348e2749f\")>\ndata_for_login = ('Credencetest@test.com', 'Credence@124')\n\n    def test_CredKart_Login_params_003(self, setup, data_for_login):\n        self.driver = setup\n        self.driver.get(\"https://automation.credence.in/login\")\n        self.driver.find_element(By.XPATH, \"//input[@name='email']\").send_keys(data_for_login[0])\n        self.driver.find_element(By.CSS_SELECTOR, \"input[id='password']\").send_keys(data_for_login[1])\n        self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n        try:\n            self.driver.find_element(By.XPATH, \"//h2[normalize-space()='CredKart']\")\n            self.driver.save_screenshot(\".\\\\Screenshots\\\\\" + data_for_login[0] + \"_\" + data_for_login[1] + \"_\" + \"test_CredKart_Login_002_Pass.PNG\")\n            print('Login TestCase is Passed')\n            self.driver.close()\n            assert True\n        except:\n            print('Login TestCase is Failed')\n            self.driver.save_screenshot(\".\\\\Screenshots\\\\\" + data_for_login[0] + \"_\" + data_for_login[1] + \"_\" + \"test_CredKart_Login_002_fail.PNG\")\n            self.driver.close()\n>           assert False\nE           assert False\n\nTestCases\\test_Login_params.py:22: AssertionError"}, "attachments": [{"name": "log", "source": "3b1e1f2e-1287-4e37-8748-ec3d908f3e7c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data_for_login", "value": "('Credencetest@test.com', 'Credence@124')"}], "start": 1691829568584, "stop": 1691829579044, "uuid": "f8495d0b-d2f8-488c-99c8-7adaec95851f", "historyId": "c6732d79a69e9b22daac4d4f10e2eac1", "testCaseId": "7db63bd431a82a92cb21f75d1263e1c0", "fullName": "TestCases.test_Login_params.Test_CredKart_Login_params#test_CredKart_Login_params_003", "labels": [{"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_Login_params"}, {"name": "subSuite", "value": "Test_CredKart_Login_params"}, {"name": "host", "value": "LAPTOP-1DT8TVKR"}, {"name": "thread", "value": "18620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_Login_params"}]}